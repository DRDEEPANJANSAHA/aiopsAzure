variables:
- group: 'devopsforai-aml-vg'
- name: 'helmVersion'
  value: 'v3.0.0-rc.3'
- name: 'imgTag'
  value: 1
- name: 'imgName'
  value: mlopspyciamlcr.azurecr.io/$(IMAGE_NAME)-$(Build.TriggeredBy.BuildNumber)
- name: 'kubernetesServiceConnection'
  value: 'abtesting-cluster'
- name: 'blueReleaseName'
  value: 'model-blue'
- name: 'greenReleaseName'
  value: 'model-green'
- name: 'kubernetesNamespace'
  value: 'abtesting'

trigger:
- master

stages:
- stage: 'Blue_Staging'
  jobs:
  - job: "Deploy_to_Staging"
    timeoutInMinutes: 0
    steps:
    - task: Bash@3
      displayName: 'Install Helm $(helmVersion)'
      inputs:
        targetType: inline
        script:  wget -q https://get.helm.sh/helm-$HELM_VERSION-linux-amd64.tar.gz -O /tmp/$FILENAME && tar -zxvf /tmp/$FILENAME -C /tmp && sudo mv /tmp/linux-amd64/helm /usr/local/bin/helm && helm version
      env:
        HELM_VERSION: $(helmVersion)
        FILENAME: helm-$(helmVersion)-linux-amd64.tar.gz
    - task: HelmDeploy@0
      displayName: 'helm upgrade'
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceConnection: $(kubernetesServiceConnection)
        command: upgrade
        chartType: FilePath
        chartPath: '$(System.DefaultWorkingDirectory)/charts/abtest-model'
        releaseName: $(blueReleaseName)
        overrideValues: 'deployment.name=$(blueReleaseName),deployment.bluegreen=blue,deployment.image.tag=$(imgTag),deployment.image.name=$(imgName)'
        install: true
        arguments: --namespace $(kubernetesNamespace)
    - publish: $(System.DefaultWorkingDirectory)/charts
      artifact: allcharts

- stage: 'Blue_50'
  jobs:
  - job: 'Blue_Rollout_50'
    displayName: 50 50 rollout to blue environment
    timeoutInMinutes: 0
    steps:
    - task: Bash@3
      displayName: 'Install Helm $(helmVersion)'
      inputs:
        targetType: inline
        script:  wget -q https://get.helm.sh/helm-$HELM_VERSION-linux-amd64.tar.gz -O /tmp/$FILENAME && tar -zxvf /tmp/$FILENAME -C /tmp && sudo mv /tmp/linux-amd64/helm /usr/local/bin/helm
      env:
        HELM_VERSION: $(helmVersion)
        FILENAME: helm-$(helmVersion)-linux-amd64.tar.gz
    - task: HelmDeploy@0
      displayName: 'helm upgrade'
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceConnection: $(kubernetesServiceConnection)
        command: upgrade
        chartType: FilePath
        chartPath: '$(System.DefaultWorkingDirectory)/charts/abtest-istio'
        releaseName: 'abtest-istio'
        overrideValues: 'weight.blue=50,weight.green=50'
        install: true
        arguments: --namespace $(kubernetesNamespace)

- stage: 'Blue_100'
  jobs:
  - deployment: 'blue_Rollout_100'
    timeoutInMinutes: 0
    environment: abtestenv
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Bash@3
            displayName: 'Install Helm $(helmVersion)'
            inputs:
              targetType: inline
              script:  wget -q https://get.helm.sh/helm-$HELM_VERSION-linux-amd64.tar.gz -O /tmp/$FILENAME && tar -zxvf /tmp/$FILENAME -C /tmp && sudo mv /tmp/linux-amd64/helm /usr/local/bin/helm
            env:
              HELM_VERSION: $(helmVersion)
              FILENAME: helm-$(helmVersion)-linux-amd64.tar.gz
          - task: HelmDeploy@0
            displayName: 'helm upgrade'
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceConnection: $(kubernetesServiceConnection)
              command: upgrade
              chartType: FilePath
              chartPath: '$(Pipeline.Workspace)/allcharts/abtest-istio'
              releaseName: 'abtest-istio'
              overrideValues: 'weight.blue=100,weight.green=0'
              arguments: --namespace $(kubernetesNamespace)

- stage: 'Rollback'
  dependsOn: 'Blue_100'
  condition: failed()
  jobs:
  - deployment: 'Roll_Back'
    displayName: 'Roll Back after failure'
    environment: abtestenv
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Bash@3
            displayName: 'Install Helm $(helmVersion)'
            inputs:
              targetType: inline
              script:  wget -q https://get.helm.sh/helm-$HELM_VERSION-linux-amd64.tar.gz -O /tmp/$FILENAME && tar -zxvf /tmp/$FILENAME -C /tmp && sudo mv /tmp/linux-amd64/helm /usr/local/bin/helm
            env:
              HELM_VERSION: $(helmVersion)
              FILENAME: helm-$(helmVersion)-linux-amd64.tar.gz
          - task: HelmDeploy@0
            displayName: 'helm upgrade'
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceConnection: $(kubernetesServiceConnection)
              command: upgrade
              chartType: FilePath
              chartPath: '$(Pipeline.Workspace)/allcharts/abtest-istio'
              releaseName: 'abtest-istio'
              overrideValues: 'weight.blue=0,weight.green=100'
              arguments: --namespace $(kubernetesNamespace)

- stage: 'Set_Production_Tag'
  dependsOn: 'Blue_100'
  condition: succeeded()
  jobs:
  - job: 'green_blue_tagging'
    timeoutInMinutes: 0
    steps:
    - task: Bash@3
      displayName: 'Install Helm $(helmVersion)'
      inputs:
        targetType: inline
        script:  wget -q https://get.helm.sh/helm-$HELM_VERSION-linux-amd64.tar.gz -O /tmp/$FILENAME && tar -zxvf /tmp/$FILENAME -C /tmp && sudo mv /tmp/linux-amd64/helm /usr/local/bin/helm
      env:
        HELM_VERSION: $(helmVersion)
        FILENAME: helm-$(helmVersion)-linux-amd64.tar.gz
    - task: HelmDeploy@0
      displayName: 'helm upgrade'
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceConnection: $(kubernetesServiceConnection)
        command: upgrade
        chartType: FilePath
        chartPath: '$(System.DefaultWorkingDirectory)/charts/abtest-model'
        releaseName: $(greenReleaseName)
        overrideValues: 'deployment.name=$(greenReleaseName),deployment.bluegreen=green,deployment.image.tag=$(imgTag),initialDeployment=true,deployment.image.name=$(imgName)'
        arguments: --namespace $(kubernetesNamespace)

- stage: 'Green_100'
  jobs:
  - job: 'Prod_Rollout_100'
    timeoutInMinutes: 0
    steps:
    - task: Bash@3
      displayName: 'Install Helm $(helmVersion)'
      inputs:
        targetType: inline
        script:  wget -q https://get.helm.sh/helm-$HELM_VERSION-linux-amd64.tar.gz -O /tmp/$FILENAME && tar -zxvf /tmp/$FILENAME -C /tmp && sudo mv /tmp/linux-amd64/helm /usr/local/bin/helm
      env:
        HELM_VERSION: $(helmVersion)
        FILENAME: helm-$(helmVersion)-linux-amd64.tar.gz
    - task: HelmDeploy@0
      displayName: 'helm upgrade'
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceConnection: $(kubernetesServiceConnection)
        command: upgrade
        chartType: FilePath
        chartPath: '$(System.DefaultWorkingDirectory)/charts/abtest-istio'
        releaseName: 'abtest-istio'
        overrideValues: 'weight.blue=0,weight.green=100'
        arguments: --namespace $(kubernetesNamespace)

- stage: 'Disable_blue'
  condition: always()
  jobs:
  - job: 'blue_disable'
    timeoutInMinutes: 0
    steps:
    - task: Bash@3
      displayName: 'Install Helm $(helmVersion)'
      inputs:
        targetType: inline
        script:  wget -q https://get.helm.sh/helm-$HELM_VERSION-linux-amd64.tar.gz -O /tmp/$FILENAME && tar -zxvf /tmp/$FILENAME -C /tmp && sudo mv /tmp/linux-amd64/helm /usr/local/bin/helm
      env:
        HELM_VERSION: $(helmVersion)
        FILENAME: helm-$(helmVersion)-linux-amd64.tar.gz
    - task: HelmDeploy@0
      displayName: 'helm uninstall blue'
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceConnection: $(kubernetesServiceConnection)
        command: delete
        arguments: $(blueReleaseName) --namespace $(kubernetesNamespace)
